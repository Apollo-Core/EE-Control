package at.uibk.dps.ee.control.agents;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ExecutorService;

import at.uibk.dps.ee.control.graph.GraphAccess;
import at.uibk.dps.ee.control.management.EnactmentState;
import at.uibk.dps.ee.control.management.ExecutorProvider;
import net.sf.opendse.model.Task;

/**
 * The {@link AgentActivationExtraction} is responsible for the activation of
 * the {@link AgentExtraction}s to transmit the data generated by the tasks in
 * the finished queue.
 * 
 * @author Fedor Smirnov
 *
 */
public class AgentActivationExtraction extends AgentContinuous implements AgentTaskCreator {

  protected final EnactmentState enactmentState;
  protected final ExecutorService executor;
  protected final GraphAccess graphAccess;
  protected final AgentFactoryExtraction agentFactory;
  protected final Set<AgentTaskListener> listeners = new HashSet<>();

  /**
   * The default constructor
   * 
   * @param enactmentState the state of the enactment (to access the queues)
   * @param executorProvider the provider for the executor service
   * @param graphAccess the access to the enactment graph
   * @param agentFactory the factory for the extraction agents
   */
  public AgentActivationExtraction(final EnactmentState enactmentState,
      final ExecutorProvider executorProvider, final GraphAccess graphAccess,
      final AgentFactoryExtraction agentFactory) {
    this.enactmentState = enactmentState;
    this.executor = executorProvider.getExecutorService();
    this.graphAccess = graphAccess;
    this.agentFactory = agentFactory;
  }

  @Override
  protected void operationOnTask(final Task finishedTask) {
    // finds all of its out edges and start an extraction agent for each of them
    graphAccess.getOutEdges(finishedTask).forEach(tuple -> executor
        .submit(agentFactory.createExtractionAgent(tuple, getAgentTaskListeners())));
  }

  @Override
  protected Task getTaskFromBlockingQueue() {
    try {
      return enactmentState.takeFinishedTask();
    } catch (InterruptedException e) {
      throw new IllegalStateException("Extraction activation agent interrupted.", e);
    }
  }

  @Override
  public Set<AgentTaskListener> getAgentTaskListeners() {
    return listeners;
  }

  @Override
  public void addAgentTaskListener(final AgentTaskListener listener) {
    listeners.add(listener);
  }
}
